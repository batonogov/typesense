apiVersion: v1
kind: Namespace
metadata:
  name: typesense
  labels:
    name: typesense
    app.kubernetes.io/name: typesense
    app.kubernetes.io/version: "29.0"
---
apiVersion: v1
kind: Secret
metadata:
  name: typesense-secret
  namespace: typesense
  labels:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/component: secret
type: Opaque
stringData:
  api-key: "your-secret-api-key-replace-this"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: typesense-config
  namespace: typesense
  labels:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/component: config
data:
  TYPESENSE_DATA_DIR: "/data"
  TYPESENSE_LISTEN_ADDRESS: "0.0.0.0"
  TYPESENSE_LISTEN_PORT: "8108"
  TYPESENSE_LOG_LEVEL: "INFO"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: typesense-pvc
  namespace: typesense
  labels:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd  # Adjust based on your cluster
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: typesense
  namespace: typesense
  labels:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/component: search-engine
    app.kubernetes.io/version: "29.0"
    app.kubernetes.io/managed-by: kubernetes
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: typesense
      app.kubernetes.io/component: search-engine
  template:
    metadata:
      labels:
        app.kubernetes.io/name: typesense
        app.kubernetes.io/component: search-engine
        app.kubernetes.io/version: "29.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8108"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: typesense
        image: ghcr.io/batonogov/typesense:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8108
          protocol: TCP
        env:
        - name: TYPESENSE_API_KEY
          valueFrom:
            secretKeyRef:
              name: typesense-secret
              key: api-key
        envFrom:
        - configMapRef:
            name: typesense-config
        volumeMounts:
        - name: data
          mountPath: /data
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        args:
        - --data-dir=/data
        - --api-key=$(TYPESENSE_API_KEY)
        - --max-memory-ratio=0.8
        - --num-memory-shards=1
        - --log-level=INFO
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: typesense-pvc
      - name: tmp
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      serviceAccountName: default
---
apiVersion: v1
kind: Service
metadata:
  name: typesense-service
  namespace: typesense
  labels:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/component: service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb  # AWS specific
spec:
  type: ClusterIP
  ports:
  - port: 8108
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/component: search-engine
---
apiVersion: v1
kind: Service
metadata:
  name: typesense-nodeport
  namespace: typesense
  labels:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/component: nodeport-service
spec:
  type: NodePort
  ports:
  - port: 8108
    targetPort: http
    protocol: TCP
    name: http
    nodePort: 30108
  selector:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/component: search-engine
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: typesense-ingress
  namespace: typesense
  labels:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - typesense.yourdomain.com
    secretName: typesense-tls
  rules:
  - host: typesense.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: typesense-service
            port:
              number: 8108
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: typesense-hpa
  namespace: typesense
  labels:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: typesense
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: typesense-sa
  namespace: typesense
  labels:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/component: serviceaccount
automountServiceAccountToken: false
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: typesense-pdb
  namespace: typesense
  labels:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/component: pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: typesense
      app.kubernetes.io/component: search-engine
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: typesense-netpol
  namespace: typesense
  labels:
    app.kubernetes.io/name: typesense
    app.kubernetes.io/component: network-policy
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: typesense
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 8108
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80